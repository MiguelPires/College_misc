package pt.tecnico.bubbledocs.domain;

class Bubbledocs{
	Integer lastID;
}

class User{
	String username;
	String name;
	String password;
}

class Root extends User;

class Spreadsheet{
	int ID;
	String name;
	DateTime createdAt;
	DateTime modifiedAt;
	Integer line;
	Integer column;
}

class Cell{
	Integer line;
	Integer column;
	Boolean protect;
}

class Content;

class Argument extends Content;

class Literal extends Argument{
	Integer value;
}

class Reference extends Argument;

class Function extends Content;

class BinaryFunction;

class Addition;

class Subtraction;

class Division;

class Multiplication;

relation UserContainsSpreadsheet{
	User playsRole creator;
	Spreadsheet playsRole createdDocs{
		multiplicity 0..*;
	}
}

relation SpreadsheetContainsUsers1{
	Spreadsheet playsRole writableDocs{
		multiplicity 0..*;
	}
	User playsRole writers{
		multiplicity 0..*;
	}
}

relation SpreadsheetContainsUsers2{
	Spreadsheet playsRole readableDocs{
		multiplicity 0..*;
	}
	User playsRole readers{
		multiplicity 0..*;
	}
}

relation SpreadsheetContainsCells{
	Spreadsheet playsRole spreadsheet;
	Cell playsRole cells{
		multiplicity 0..*;
	}
}

relation CellContainsContent{
	Cell playsRole cell{
		multiplicity 0;
	}
	Content playsRole content{
		multiplicity 0..1;
	}
}

relation BinaryFunctionContainsArgument1{
	BinaryFunction playsRole binaryFunction1{
		multiplicity 0;
	}
	Argument playsRole firstOperand{
		multiplicity 1;
	}
}
	
relation BinaryFunctionContainsArgument2{
	BinaryFunction playsRole binaryFunction2{
		multiplicity 0;
	}
	Argument playsRole secondOperand{
		multiplicity 1;
	}
}

relation DomainRootHasBubbleApplication{
  	.pt.ist.fenixframework.DomainRoot playsRole root{
   		multiplicity 0..1;
  	}
 	Bubbledocs playsRole bubbledocs{
    	multiplicity 0..1;
  	}
}

relation BubbledocsContainsUsers{
	Bubbledocs playsRole bubbledocs{
		multiplicity 0;
	}
	User playsRole users{
		multiplicity 0..*;
	}
}

relation BubbledocsContainsSpreadsheets{
	Bubbledocs playsRole bubbledocs{
		multiplicity 0;
	}
	Spreadsheet playsRole docs{
		multiplicity 0..*;
	}
}

relation ReferenceContainsCell{
	Reference playsRole reference{
		multiplicity 0;
	}
	Cell playsRole referedCell{
		multiplicity 1;
	}
}

relation RootContainsBubbledocs{
	Root playsRole admin;
	Bubbledocs playsRole app{
		multiplicity 0..1;
	}
}
