This paper joins a long line of works that aim to explain Lamport's seminal works,

simplify them, and/or develop special cases and variants.



The goal of the paper at hand is to simplify/clarify Generalized Paxos (GP) and

speed up its understanding and adoption.  Another goal is to extend the GP

contribution to Byzantine settings. 



In a nutshell, the paper contains three XXs:



1. It explains a very limited form of GP. In this variant of GP, processes pick an increasing sequence of 

commands that may differ from process to process in the ordering of commutative operations.

The main insight is as follows. Learning is performed over sequences, not individual

commands. A sequence is learned when n-f votes are assembled on **possibly different but

compatible** sequences. 



(The rest follows directly from this insight, and is a direct extension of Paxos

and PBFT.)



2. The Fast variant of Paxos benefits from the GP rule: Proposers directly

propose concurrently, and if the proposals commute, there is no conflict.



3. The idea of Fast Paxos can be applied to PBFT to skip the leader. Once again,

the benefit is that concurrent proposals may not conflict. 



I think that if the paper focused on explaining the above well, and also

addressed my comment below on Zyzzyva, this could be a nice paper with

pedagogical value.



However, because the goal is (at least partially) pedagogical, I expect the presentation

to be both meticulous and insightful. 



I find a lot of problems with the current paper.



Introduction:



Here, the first mention of Generalized Paxos says it is "weaker than consensus".

This is not clear/precise. Replication of multiple commands (and the sequence of

commands executed by learners) with GP may have weaker guarantees than

linearizability. But each decision instance is a consensus decision.





Section 2.1: 



This section provides a high level overview of Paxos. However, it contains many

unexplained or underspecified comments.



*  The reference

to stages 1a/2a is weird, because the protocol steps are not mentioned here.



* It is odd to say "... cost of using quorums of size n-e" , when e is not

  specified. In particular, if e = n/2, then what is the "cost" ? 



* Lines 94-111 explain the concept of C-structs and aim to give intuition on GP.

  Unfortunately, the key idea of a learned C-struct being a "prefix" of a larger

  C-struct is not explained. Without it, there is very little value in the

entire paragraph.



Section 2.2:



* You are missing an important historical milestone, the DLS Byzantine solution

  for the Byzantine Generals problem..

  It gives the first solution for 3f+1 that remain safe under asynchrony, and

makes progress under synchrony (same guarantee as DLS and Paxos for benign

settings).



  Once you cover the DLS solution, you may observe that some of the text

regarding PBFT is not precise. In particular, two phases are not necessarily

needed. They were introduced in PBFT for efficiency (DLS is not a practical

BFT solution). 



* I think that it may important to indicate additional milestone Byzantine

* state-machine replication solutions. I didn't run an exhaustive literature

* survey, but I believe that Mike Reiter has a number of relevant works that

  precede PBFT; and Christian Cachin wrote some tutorials on Byzantine replication.



Section 3:



The system model specifies only n processes.  Are learners, acceptors, and proposers necessarily designated 

among the n processes?



What are the resilience thresholds for the protocols? As I understand from the

paper, you assume n=3f+1 both in the crash-resilient case (section 4) and the

Byzantine case (section 5). In the crash-resilient case, you use n=3f+1 in order

to support a fast path with f-resilience. This is briefly discussed in section 2

(when you overview Fast Paxos), but it is never mentioned as being the model for

this paper.



Section 4:



This section presents the crash-resilient GP. The entire discussion

from line 224 onward assumes a Fast Paxos model n=2e+f+1 where e==f. Is this

necessary? Couldn't you describe a general model where e could be zero? 



Section 5:



This section provides two contributions. One is a description of PBFT. The other

is extending PBFT to provide GP consensus.



As far as the basic PBFT paradigm goes, the description here is not that great. 

I think that clear descriptions of PBFT

exist in the literature. In fact, I applaud the description of the original PBFT

paper itself (and there is a clean journal version), I am not sure it is

lacking. 



This leaves the extension into GP replication.



To me, it is rather obvious that in PBFT, proposers can skip the leader and go

directly to acceptors. In fact, any Byzantine-resilient protocol must tolerate a

Byzantine leader. A Byzantine leader might equivocate and send different

proposals to different acceptors. Hence, the protocol protects against

conflicting proposals already.



A leader is used in Paxos and in PBFT (only) in order to guarantee progress

during periods of synchrony. It is also efficient in practice, since the leader

can batch multiple proposals into a block, pipeline proposals, and so on.



Misc:



I was puzzled by the discussion of Zyzzyva. Zyzzyva picks a different point in

the resilience/performance than this paper: The fast path in Zyzzyva has no

fault tolerance, but it avoid the two all-to-all phases of PBFT. It also add

speculative execution by learners. (It also turns out that the details of

Zyzzyva's view change protocol are fundamentally wrong, see "Revisiting Fast

Practical Byzantine Fault Tolerance" by Abraham et al., 2018.) Why couldn't GP

consensus work with the Zyzzyva scheme?
